

1.Lectura de un archivo de texto: Crea un programa que abra un archivo de texto, 
lea su contenido y lo muestre en la consola. Asegúrate de manejar correctamente los errores de apertura y lectura.
OK

2.Contador de caracteres: Implementa un programa que abra un archivo y cuente el número de caracteres en él. 
Usa read para leer el contenido del archivo en bloques y actualizar el contador.
OK x2

3.Lectura y escritura en un archivo: Escribe un programa que abra un archivo existente, 
lea su contenido y lo copie a un nuevo archivo. Debes usar read para leer del archivo original y write para escribir en el nuevo archivo.
OK

4.Lectura de líneas: Crea un programa que devuelva el numero de lineas.
OK x2

5.Lectura de líneas: Crea un programa que lea un archivo línea por línea usando read. 
Define un tamaño fijo para las líneas y utiliza un búfer.

    Desglosemos lo que debes hacer:
    1. Leer el archivo línea por línea:
        Aunque en C existen funciones como fgets() para leer líneas completas, en este ejercicio debes usar la función read(). 
        Esta función no "sabe" lo que es una línea, solo lee una cantidad fija de bytes. 
        Por lo tanto, tendrás que procesar manualmente el contenido que lees para detectar las líneas, identificadas por el carácter de salto de línea ('\n').
    2. Tamaño fijo para las líneas:
        Debes definir un tamaño máximo para cada línea. 
        Por ejemplo, si decides que las líneas tienen un tamaño máximo de 100 caracteres, 
        entonces necesitas leer el archivo en bloques que no superen esa longitud y detenerte cuando encuentres 
        un salto de línea (\n) o cuando llenes ese espacio.
    3. Utilizar un búfer:
        Un búfer es un espacio temporal en memoria que usas para almacenar datos que estás procesando. 
        En este caso, deberás usar un búfer para almacenar los datos que lees del archivo y procesarlos línea por línea.

    Pasos para resolver el ejercicio:
    1. Abrir el archivo con la función open() y gestionar posibles errores.
    2. Leer el archivo con la función read(), utilizando un tamaño fijo de bloque para el búfer.
    3. Procesar lo leído: A medida que lees el archivo, debes ir revisando los bytes leídos para detectar el carácter de salto de línea ('\n'). 
    Cuando encuentres una línea completa, la imprimes (o la procesas de alguna manera).
    4. Manejar líneas incompletas: A veces, la lectura puede terminar justo en medio de una línea (por ejemplo, si el búfer es demasiado pequeño). 
    Tendrás que manejar estos casos para que las líneas no se corten abruptamente.
    5. Cerrar el archivo cuando termines de leerlo.

    Ejemplo de cómo podría funcionar:
    1. Definimos un tamaño de línea máximo (digamos 100 bytes).
    2. Usamos un búfer de lectura para leer el archivo en bloques.
    3. Mientras lees, vas acumulando los caracteres en otro búfer hasta que encuentres un salto de línea ('\n') o llenes el búfer.
    4. Cada vez que encuentres un salto de línea o llenes el búfer, imprimes la línea y comienzas a acumular la siguiente.


6.Lectura en bloques: Diseña un programa que lea un archivo en bloques de 1024 bytes. 
Debes mostrar cada bloque leído en la consola y continuar hasta llegar al final del archivo.


7.Lectura de un archivo hasta EOF: Crea un programa que lea un archivo hasta el final (EOF) y 
cuente cuántas veces aparece un carácter específico en el archivo. 
OK

8.Lectura y búsqueda de palabras: Implementa un programa que abra un archivo y busque una palabra específica, 
leyendo el archivo en bloques. Indica cuántas veces aparece la palabra.
OK

9.Intercambio de contenido entre archivos: Escribe un programa que lea dos archivos y los intercambie, 
de modo que el contenido del primer archivo se copie en el segundo y viceversa.
OK

10.Lectura de un archivo binario: Crea un programa que abra un archivo binario y lea su contenido. 
Debes mostrar el contenido en formato hexadecimal en la consola.


11.Lectura y edición de archivos: Desarrolla un programa que lea un archivo y realice algunas modificaciones 
(por ejemplo, reemplazar un carácter específico en todo el archivo 'a' se reemplaza por 'x') y luego escriba el resultado en un nuevo archivo.

