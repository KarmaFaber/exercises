# Ejercicios de Descriptores de Archivo y Pipes

#➤❅──────➼✦➴✦➼──────❅➤•➤──────➼✦➴✦➼──Ejercicios en Bash──➼✦➴✦➼──────➤❅•➤──────➼✦➴✦➼─────➤❅#

1. **Redirección básica de salida:** 
   - Redirige la salida del comando `ls` a un archivo llamado `output.txt`.

2. **Redirección básica de entrada:** 
   - Usa el comando `wc -l` para contar las líneas de un archivo llamado `input.txt`.

3. **Redirección de entrada y salida:**
   - Usa el comando `sort` para ordenar las líneas de `input.txt` y guarda el resultado en `sorted.txt`.

4. **Pipe básico:**
   - Combina los comandos `ls` y `wc -l` usando un pipe para contar el número de archivos en un directorio.

5. **Redirección con append:**
   - Ejecuta el comando `date` y agrega el resultado al archivo `log.txt`.

6. **Pipes múltiples:**
   - Encuentra todos los archivos `.c` en el directorio actual, ordénalos alfabéticamente y cuenta cuántos hay usando `find`, `sort` y `wc`.

7. **Tuberías y errores:**
   - Redirige tanto la salida estándar como el error estándar del comando `ls nonexistentfile` a `errors.txt`.

8. **Combinando redirecciones:**
   - Redirige la salida estándar de `echo Hello` al archivo `hello.txt`, luego redirige el contenido de `hello.txt` como entrada a `cat`.

9. **Pipe avanzado:**
   - Usa `grep` para buscar líneas que contengan la palabra "pipe" en `input.txt` y redirige el resultado al archivo `results.txt`.

10. **Redirección de descriptor específico:**
    - Ejecuta un script que escriba mensajes a los descriptores de archivo 1, 2, y 3, y redirige cada uno a diferentes archivos.

11. **Concatenar la salida de dos comandos:**
    - Usa un pipe para combinar la salida de los comandos `cat input.txt` y `echo "Nueva Línea"` en un archivo llamado `combined.txt`.

12. **Dividir la salida de un comando:**
    - Usa un pipe para redirigir la salida de `ls -l` a dos archivos diferentes (`file1.txt` y `file2.txt`) utilizando el comando `tee`.

13. **Redirigir y anexar:**
    - Escribe un comando que redirija la salida estándar del comando `echo "Texto adicional"` al final de un archivo `output.txt`.

14. **Ignorar salida estándar:**
    - Ejecuta el comando `ls` y redirige su salida estándar a `/dev/null` para que no se muestre en la terminal.

15. **Combinar salida estándar y errores:**
    - Usa `ls nonexistentfile` para generar un error y redirige tanto la salida estándar como el error estándar al archivo `output.log`.

16. **Pipe con filtrado:**
    - Usa un pipe para pasar la salida de `ps aux` al comando `grep bash` y redirige el resultado al archivo `bash_processes.txt`.

17. **Procesar varias entradas con un pipe:**
    - Usa el comando `cat` para combinar los archivos `file1.txt` y `file2.txt`, y pasa la salida al comando `sort` para ordenarla. Guarda el resultado en `sorted_combined.txt`.

18. **Duplicar la salida de un comando:**
    - Usa un pipe con el comando `tee` para redirigir la salida de `echo "Hola mundo"` tanto a la pantalla como al archivo `output.txt`.

19. **Usar descriptor de archivo específico:**
    - Ejecuta un script que redirija el descriptor 3 hacia un archivo `custom_fd_output.txt` y escribe datos en ese descriptor con `echo "Mensaje" >&3`.

20. **Error intencionado y manejo con tuberías:**
    - Intenta listar un archivo inexistente con `ls nonexistentfile` y pasa el error estándar al comando `grep "No such"` para filtrarlo. Guarda el resultado en `errors_filtered.txt`.



#➤❅──────➼✦➴✦➼──────❅➤•➤──────➼✦➴✦➼──Ejercicios en C──➼✦➴✦➼──────➤❅•➤──────➼✦➴✦➼─────➤❅#

0. **gnl_stdout** OK
    - coger los datos de fd 1 y mandarlos a un archivo. 

1. **Abrir y cerrar archivos:** OK
    - Escribe un programa que abra un archivo `file.txt`, lea su contenido y lo imprima en la salida estándar.

2. **Crear y escribir en un archivo:** OK
    - Implementa un programa que cree un archivo `output.txt` y escriba "Hola, mundo!" en él.

3. **Leer desde la entrada estándar y escribir en un archivo:**  OK-VER 0_ejerc.c
    - Escribe un programa que lea texto desde la entrada estándar y lo guarde en un archivo llamado `input_copy.txt`.

4.0 **Copiar el contenido de un archivo:** - OK
    - Escribe un programa que copie el contenido de `source.txt` a `destination.txt`.

4.1 **uso funcion execve()** -OK
    -escrive un programa usando fucnion execve().
    -formato main: int main(void)

4.2 **uso funcion execve()** -OK
    -escrive un programa usando fucnion execve().
    -formato main: int main(void)

4.3 **uso funcion execve() y access**  -OK  
    -escrive un programa usando fucnion execve(), access y variebles de entorno.
    -formato main: int main(int argc, char *argv[], char *envp[])

5.0 **Redirección de salida estándar: dup(), dup2()** - OK
    Escribe un programa en C que cree un archivo llamado output1.txt y redirija la salida estándar a este archivo. Luego, utiliza printf para escribir la frase "Hello, world!" en el archivo. Después de escribir, asegúrate de restaurar la salida estándar al terminal.
    Pista: Usa dup, dup2 y STDOUT_FILENO.

5.1 **Redirección de salida estándar: dup(),  dup2()** -OK
    Escribe un programa que redirija temporalmente la salida estándar a un archivo llamado temp_output.txt, 
    escriba dos líneas de texto en el archivo, y luego restaure la salida estándar para escribir "Redirection complete" en la terminal.
    Asegúrate de que el programa no elimine el contenido existente en el archivo, y agrega la línea "This is appended text.".
    Pista: Usa dup, dup2 y STDOUT_FILENO.

5.2 **Redirección de salida estándar: dup(),  dup2()** -OK
    Escribe un programa en C con una función llamada write_message_to_file. 
    Esta función debe recibir el nombre de un archivo como argumento, redirigir la salida estándar al archivo, 
    y luego escribir el mensaje "Message written by function." dentro del archivo. Después de la ejecución de la función, 
    el programa debe restaurar la salida estándar y escribir "Operation completed" en la terminal.
    Pista: Usa funciones auxiliares como dup y dup2 para gestionar los descriptores de archivo.

6.0 **Redirección de entrada estándar:**-OK
    - Leer desde un Archivo en Lugar de la Terminal. 
	Redirige la entrada estándar para que lea desde un archivo `input.txt`.
    -ejemplo bash: wc -w < input.txt

6.1 **Redirección de entrada estándar:**-OK
    Simular Entrada desde un Archivo. 
    Escribe un programa que cree un archivo llamado simulated_input.txt, escriba la línea "42", y 
    luego redirija la entrada estándar a este archivo. 
    Usa scanf para leer el número del archivo e imprime su doble en la terminal.

6.2 **Redirección de entrada estándar:** -OK
    Redirección Temporal de Entrada. 
    Escribe un programa que redirija temporalmente la entrada estándar a un archivo llamado temp_input.txt, 
    lea una línea de texto del archivo y la almacene en un buffer. 
    Luego restaura la entrada estándar y muestra el contenido leído en la terminal.

7.0 **Pipe básico-> pipe sin fork:**-       OK
    - Implementa un programa que cree un pipe, escriba "Hola, pipe!" en un extremo y lo lea del otro extremo para imprimirlo en pantalla.
    - ejemplo bash: echo "Hola, pipe!" | cat 
    - ejemplo bach: ls | wc -l

7.1 **Pipe básico-> pipe con fork:**-OK
    - Implementa un programa que cree un pipe, escriba "Hola, pipe!" en un extremo y lo lea del otro extremo para imprimirlo en pantalla.
    - Crea un programa donde el proceso padre lea en el pipe y el proceso hijo escriba del pipe e imprima el contenido.
    - ejemplo bash: echo "Hola, pipe!" | cat 
    - ejemplo bach: ls | wc -l

8.0 **Multiprocesos con `fork` y pipes && wait o waitpid:**-OK
    - Crea un programa donde el proceso padre escriba en el pipe y el proceso hijo lea del pipe e imprima el contenido.
    - utiliza las fucniones wait o waitpid

9.0 **Redirección combinada:** -OK
    Copiar Contenido de un Archivo a Otro: 
    Escribe un programa que redirija la entrada estándar a un archivo llamado source.txt y la salida estándar 
    a un archivo llamado destination.txt. El programa debe leer el contenido de source.txt y copiarlo a destination.txt.

9.1 **Redirección combinada:**-OK
    escribir y leer datos de stdin, guardarlos en un archivo e imprimirlos en terminal. 

9.2 **Redirección combinada:**-OK
    Modificar Texto Durante la Copia. 
    Escribe un programa que redirija la entrada estándar a un archivo llamado input.txt y la salida estándar a 
    un archivo llamado output.txt. El programa debe leer línea por línea el contenido de input.txt, convertirlo a mayúsculas, 
    y escribir el resultado en output.txt.

9.3 **Redirección combinada:**-OK
   Simular un Filtro entre Archivos. 
   Escribe un programa que redirija la entrada estándar a un archivo llamado input.txt y 
   la salida estándar a un archivo llamado filtered_output.txt. El programa debe leer el contenido de input.txt, 
   eliminar todas las vocales, y escribir el texto resultante en filtered_output.txt

9.4 **delete file con unlink**-OK
    -usar fucnion unlink en un programa. 

10. **Pipes múltiples:**
    - Implementa un programa que use dos pipes para conectar tres procesos:
        - Proceso 1 escribe en el pipe 1.
        - Proceso 2 lee del pipe 1, transforma el contenido y escribe en el pipe 2.
        - Proceso 3 lee del pipe 2 y lo imprime.

11. **Redirección de errores estándar:**
    - Escribe un programa que redirija el error estándar a un archivo `error.log` y genere un error intencionado (por ejemplo, intentando abrir un archivo inexistente).

12.0 **Concatenar archivos usando pipes:**
    - Usa un pipe para leer dos archivos `file1.txt` y `file2.txt` y concatenar sus contenidos en la salida estándar.

12.1 **Concatenar archivos usando pipes:**
    - Usa un pipe para leer dos archivos `file1.txt` y `file2.txt` y concatenar sus contenidos en el archivo output.txt

13. **Ejecutar comandos con `execve`:** -OK- VER EJERC 4.1, 4.2, 4.3 Y 6.0
    - Escribe un programa que use `execve` para ejecutar el comando `ls` y redirija su salida a un archivo.

14. **Leer comandos desde un archivo:**
    - Implementa un programa que lea comandos desde un archivo `commands.txt`, ejecute cada comando y redirija la salida a un archivo `results.txt`.

15.0 **Simulación de shell básica:**
    -escribe programa con el comando: <ejemplo.txt grep "main" | wc -w >outfile.txt
	- usa fucnion execve() de C.

15.1 **Simulación de shell básica:**
    - Escribe un programa en C que implemente un mini shell con soporte para:
        - Redirección de entrada (`<`).
        - Redirección de salida (`>`).
        - Pipes (`|`).

16. **Contar líneas en un archivo:**
    - Escribe un programa que lea un archivo `input.txt` y cuente el número de líneas, imprimiendo el resultado en la salida estándar.

17. **Transformar texto leído con pipes:**
    - Crea un programa que lea texto de un archivo `input.txt`, pase el texto por un pipe para convertirlo a mayúsculas y escriba el resultado en `output.txt`.

18. **Duplicar salida con `tee`:**
    - Escribe un programa que simule el comando `tee`, copiando la salida estándar tanto a un archivo como a la pantalla.

19. **Simular `cat` con redirección:**
    - Escribe un programa que simule el comportamiento de `cat`, leyendo un archivo y escribiendo su contenido en la salida estándar.

20. **Comunicación entre procesos con pipes:**
    - Implementa un programa donde dos procesos se comuniquen usando un pipe:
        - El proceso 1 escribe un mensaje.
        - El proceso 2 lo lee, modifica el mensaje y lo imprime en pantalla.





