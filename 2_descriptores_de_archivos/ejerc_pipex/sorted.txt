























      - Pipes (`|`).
      - Proceso 1 escribe en el pipe 1.
      - Proceso 2 lee del pipe 1, transforma el contenido y escribe en el pipe 2.
      - Proceso 3 lee del pipe 2 y lo imprime.
      - Redirección de entrada (`<`).
      - Redirección de salida (`>`).
    - Crea un programa donde el proceso padre escriba en el pipe y el proceso hijo lea del pipe e imprima el contenido.
    - Ejecuta un script que escriba mensajes a los descriptores de archivo 1, 2, y 3, y redirige cada uno a diferentes archivos.
    - Escribe un programa en C que implemente un mini shell con soporte para:
    - Escribe un programa que abra un archivo `file.txt`, lea su contenido y lo imprima en la salida estándar.
    - Escribe un programa que redirija el error estándar a un archivo `error.log` y genere un error intencionado (por ejemplo, intentando abrir un archivo inexistente).
    - Escribe un programa que use `execve` para ejecutar el comando `ls` y redirija su salida a un archivo.
    - Implementa un programa que cree un pipe, escriba "Hola, pipe!" en un extremo y lo lea del otro extremo para imprimirlo en pantalla.
    - Implementa un programa que lea comandos desde un archivo `commands.txt`, ejecute cada comando y redirija la salida a un archivo `results.txt`.
    - Implementa un programa que use dos pipes para conectar tres procesos:
    - Redirige la salida estándar para que escriba en un archivo llamado `output.txt`.
    - Usa `dup2` para redirigir tanto la salida estándar como la entrada estándar a un archivo diferente.
   - Combina los comandos `ls` y `wc -l` usando un pipe para contar el número de archivos en un directorio.
   - Ejecuta el comando `date` y agrega el resultado al archivo `log.txt`.
   - Encuentra todos los archivos `.c` en el directorio actual, ordénalos alfabéticamente y cuenta cuántos hay usando `find`, `sort` y `wc`.
   - Redirige la salida del comando `ls` a un archivo llamado `output.txt`.
   - Redirige la salida estándar de `echo Hello` al archivo `hello.txt`, luego redirige el contenido de `hello.txt` como entrada a `cat`.
   - Redirige tanto la salida estándar como el error estándar del comando `ls nonexistentfile` a `errors.txt`.
   - Usa `grep` para buscar líneas que contengan la palabra "pipe" en `input.txt` y redirige el resultado al archivo `results.txt`.
   - Usa el comando `sort` para ordenar las líneas de `input.txt` y guarda el resultado en `sorted.txt`.
   - Usa el comando `wc -l` para contar las líneas de un archivo llamado `input.txt`.
# Ejercicios de Descriptores de Archivo y Pipes
#➤❅──────➼✦➴✦➼──────❅➤•➤──────➼✦➴✦➼──Ejercicios en Bash──➼✦➴✦➼──────➤❅•➤──────➼✦➴✦➼─────➤❅#
#➤❅──────➼✦➴✦➼──────❅➤•➤──────➼✦➴✦➼──Ejercicios en C──➼✦➴✦➼──────➤❅•➤──────➼✦➴✦➼─────➤❅#
1. **Redirección básica de salida:**
10. **Redirección de descriptor específico:**
11. **Abrir y cerrar archivos:**
12. **Redirección con `dup2`:**
13. **Pipe básico:**
14. **Multiprocesos con `fork` y pipes:**
15. **Redirección combinada:**
16. **Pipes múltiples:**
17. **Redirección de errores:**
18. **Leer comandos desde un archivo:**
19. **Ejecutar comandos con `execve`:**
2. **Redirección básica de entrada:**
20. **Simulación de shell básica:**
3. **Redirección de entrada y salida:**
4. **Pipe básico:**
5. **Redirección con append:**
6. **Pipes múltiples:**
7. **Tuberías y errores:**
8. **Combinando redirecciones:**
9. **Pipe avanzado:**
